import os
import tarfile
import urllib.request
import email
import email.policy
from collections import Counter

HAM_URL = EMAILS_URL_ROOT + "sampleEmails.tar.gz"
SPAMS_URL = EMAILS_URL_ROOT + "sampleEmails.tar.gz"
SPAM_PATH = os.path.join("datasets", "spam")

def fetch_emails(To=T, From=F, Date=D, Subject=S, Message-ID=M):
    if not os.path.isdir(T):
        os.makedirs(T)
        for filename, url in (("sampleEmails.tar.gz", F),("sampleEmails.tar.gz", F)):
            path = os.path.join(D, filename)
            #checking if there is a file
            if not os.path.isfile(path):
                urllib.request.urlretrieve(url, path)
            email_tar_file = tarfile.open(path)
            email_tar_file.extractall(path=D)
            email_tar_file.close()
            
fetch_emails()

Subject_name = os.path.join(S, "Subject")
Date_name = os.path.join(D, "Date")

ham_filenames = [name for name in sorted(os.listdir(Subject_name))]
spam_filenames = [name for name in sorted(os.listdir(Date_name))]
def load_emails(To, From, Date, Subject, Message-ID):
    directory = "from" if is_from else "To"
    with open(os.path.join(To, directory, filename), "rb") as f:
        return email.parser.BytesParser(policy=email.policy.default).parse(f)
ham_emails = [load_emails(is_spam=False, filename=name) for name in ham_filenames]
spam_emails = [load_emails(is_spam=True, filename=name) for name in spam_filenames]

print(from[42].get_content().strip())

def get_structures(email):
    if isinstance(email, str):
        return email
    email_payload = email.get_payload()
    if isinstance(email_payload, list):
        return "multipart({})".format(", ".join([
            get_structures(sub_email)
            for sub_email in email_payload
        ]))
    else:
        return email.get_content_type()
def type_counter(emails):
    our_count = Counter()
    for email in emails:
        structure = get_structures(email)
        our_count[structure] += 1
    return our_count
    
print(structures_counter(To))

print(structures_counter(from.most_common())

[('text/plain', 2409), ('multipart(text/plain, application/pgp-signature)', 66), ('multipart(text/plain, text/html)', 8), ('multipart(text/plain, text/plain)', 4), ('multipart(text/plain)', 3), ('multipart(text/plain, application/octet-stream)', 2), ('multipart(text/plain, text/enriched)', 1), ('multipart(text/plain, application/ms-tnef, text/plain)', 1), ('multipart(multipart(text/plain, text/plain, text/plain), application/pgp-signature)', 1), ('multipart(text/plain, video/mng)', 1), ('multipart(text/plain, multipart(text/plain))', 1), ('multipart(text/plain, application/x-pkcs7-signature)', 1), ('multipart(text/plain, multipart(text/plain, text/plain), text/rfc822-headers)', 1), ('multipart(text/plain, multipart(text/plain, text/plain), multipart(multipart(text/plain, application/x-pkcs7-signature)))', 1), ('multipart(text/plain, application/x-java-applet)', 1)]

for header, value in to[0].items():
    print(header,":",value)
